P <- list()
for (i in 1:4) {
g1 <- data_test %>%
ggplot(aes(x = contexts.1)) +
#geom_density(alpha = 0.5) +
geom_histogram()+
labs(x = 'PIE', title = 'contexts.1') +
theme(legend.position="none")
Q[[length(Q) + 1]] <- g1
#grid.arrange(Q[[i]], ncol=1)
#if(i %% 3==0){
#grid.arrange(Q[[i]], Q[[i-1]], Q[[i-2]], ncol=3)
#}
g2 <- training.data %>%
ggplot(aes(x = contexts.1)) +
geom_histogram()+
#geom_density(alpha = 0.5) +
labs(x = 'PIE', title = 'contexts.1') +
theme(legend.position="none")
P[[length(P) + 1]] <- g2
#print(Q[[1]])
grid.arrange(Q[[i]],P[[i]], ncol=2)
}
#grid.arrange(Q[[1]], ncol=1)
features <- c('powerWatts', 'contexts', 'instructions', 'cpu.cycles', 'branches', 'branch.misses', 'L1.icache.loads', 'L1.dcache.loads', 'REQUESTS_TO_L2', 'RETIRED_UOPS')
Q <- list()
P <- list()
for (i in 1:4) {
g1 <- data_test %>%
ggplot(aes(x = contexts.1)) +
#geom_density(alpha = 0.5) +
geom_histogram()+
labs(x = 'PIE', title = 'contexts.1') +
theme(legend.position="none")
Q[[length(Q) + 1]] <- g1
#grid.arrange(Q[[i]], ncol=1)
#if(i %% 3==0){
#grid.arrange(Q[[i]], Q[[i-1]], Q[[i-2]], ncol=3)
#}
g2 <- training.data %>%
ggplot(aes(x = training.data[,i])) +
geom_histogram()+
#geom_density(alpha = 0.5) +
labs(x = 'PIE', title = colnames(training.data[i])) +
theme(legend.position="none")
P[[length(P) + 1]] <- g2
#print(Q[[1]])
grid.arrange(Q[[i]],P[[i]], ncol=2)
}
#grid.arrange(Q[[1]], ncol=1)
features <- c('powerWatts', 'contexts', 'instructions', 'cpu.cycles', 'branches', 'branch.misses', 'L1.icache.loads', 'L1.dcache.loads', 'REQUESTS_TO_L2', 'RETIRED_UOPS')
Q <- list()
P <- list()
for (i in 1:4) {
g1 <- data_test %>%
ggplot(aes(x = training.data[,i])) +
#geom_density(alpha = 0.5) +
geom_histogram()+
labs(x = 'PIE', title = colnames(training.data[i])) +
theme(legend.position="none")
Q[[length(Q) + 1]] <- g1
#grid.arrange(Q[[i]], ncol=1)
#if(i %% 3==0){
#grid.arrange(Q[[i]], Q[[i-1]], Q[[i-2]], ncol=3)
#}
g2 <- training.data %>%
ggplot(aes(x = training.data[,i])) +
geom_histogram()+
#geom_density(alpha = 0.5) +
labs(x = 'PIE', title = colnames(training.data[i])) +
theme(legend.position="none")
P[[length(P) + 1]] <- g2
#print(Q[[1]])
grid.arrange(Q[[i]],P[[i]], ncol=2)
}
features <- c('powerWatts', 'contexts', 'instructions', 'cpu.cycles', 'branches', 'branch.misses', 'L1.icache.loads', 'L1.dcache.loads', 'REQUESTS_TO_L2', 'RETIRED_UOPS')
Q <- list()
P <- list()
for (i in 1:4) {
g1 <- data_test %>%
ggplot(aes(x = data_test[,i])) +
#geom_density(alpha = 0.5) +
geom_histogram()+
labs(x = 'PIE', title = colnames(data_test[i])) +
theme(legend.position="none")
Q[[length(Q) + 1]] <- g1
#grid.arrange(Q[[i]], ncol=1)
#if(i %% 3==0){
#grid.arrange(Q[[i]], Q[[i-1]], Q[[i-2]], ncol=3)
#}
g2 <- training.data %>%
ggplot(aes(x = training.data[,i])) +
geom_histogram()+
#geom_density(alpha = 0.5) +
labs(x = 'PIE', title = colnames(training.data[i])) +
theme(legend.position="none")
P[[length(P) + 1]] <- g2
#print(Q[[1]])
grid.arrange(Q[[i]],P[[i]], ncol=2)
}
#grid.arrange(Q[[1]], ncol=1)
View(training.data)
PATH <- "./validation"
files <- list.files(path = PATH, full.names = TRUE)
data_test <- do.call(rbind,lapply(files, function(x) {
# apply function
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
d <- removeVars(d)
d <- d[complete.cases(d), ]
if (coresSum) {
d <- sum_cores(d)
}
METRICS <- names(d)
#Filter some metrics for some tests
#if (!is.null(filter2)) {
#METRICS <- METRICS[!METRICS %in% filter2]
#}
#d <- d[, METRICS]
d[d < 0] <- 0
#d[ , "app"] <- substr(basename(x),1,nchar(basename(x))-4)
#d[ , "type"] <- 'test'
return(d)
}))
View(data_test)
write.csv(data_test,"data_test.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(rminer)
library(foreach)
library(randomForest)
source("./tools.R")
source("./heatMap.R")
library(doMC)
registerDoMC(2)
library(mlbench)
library(caret)
library(zoo)
library(plyr)
#library(factoextra)
library(data.table)
library(gridExtra)
library(ggExtra)
library(cowplot)
server <- "bscgrid31"
coresSum <- TRUE
muliplyMetrics <- FALSE
exponentialMetrics <- TRUE
LOG_METRICS <- TRUE
OUTPUT_FOR_PAPER <- TRUE
log_file <- "./log/model.log"
PATH <- "./training"
#PATH <- "./validation"
#files <- list.files(path = PATH,pattern="^results*", full.names = TRUE)
files <- list.files(path = PATH,pattern="*cpu*", full.names = TRUE)
PERF_COUNTERS = c("cpu.migrations","instructions", "cpu.cycles", "branches", "branch.misses","L1.icache.loads","L1.icache.load.misses","L1.dcache.loads","L1.dcache.load.misses","LLC.loads","LLC.load.misses","LLC.stores","DISPATCHED_FPU_OPS","L2_CACHE_MISS","MEMORY_REQUESTS","REQUESTS_TO_L2","RETIRED_MMX_FP_INSTRUCTIONS_MMX","RETIRED_MMX_FP_INSTRUCTIONS_SSE","RETIRED_MMX_FP_INSTRUCTIONS_X87","RETIRED_SSE_OPS","RETIRED_UOPS")
cores <- c("Core_0","Core_1","Core_2","Core_3","Core_4","Core_5","Core_6","Core_7","Core_8","Core_9","Core_10","Core_11","Core_12","Core_13","Core_14","Core_15")
filter <- c("cpu_system", "cpu_idle", "cpu_nice","reads","writes","read_time" ,"write_time","mem_shared","interrupts","cpu_system","cpu_wio","cpu_intr", "cpu_sintr","pkts_in","pkts_out","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
#filter <- c("cpu.migrations","mem_shared","interrupts","cpu_intr", "cpu_sintr","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
fff <- c("cpu.migrations","L2_RQSTS_ALL_CODE_RD","L2_RQSTS_CODE_RD_HIT","L2_RQSTS_CODE_RD_MISS","MEMORY_REQUESTS","mem_cached")
disk.metrics <- c("bytes_read","bytes_written")
network.metrics <- c("bytes_in","bytes_out", "pkts_in", "pkts_out")
#filter2 <- c(filter, disk.metrics, network.metrics, cores)
cpu.metrics <- c("cpu_util","cpu_user")
keepme <- c("powerWatts", disk.metrics, network.metrics, cores)#, PERF_COUNTERS)#, cpu.metrics)
filter2 <- c("cpu_util","cpu_user","bytes_read","bytes_written")
#keepme <- c()
#mainkeepme <- c("powerWatts", "instructions", "cpu.cycles", "branch-misses", "LLC.loads", "RETIRED_UOPS")
min <- 2000
#Read training data (with data only describing the server)
training.data <- do.call(rbind,lapply(files, function(x) {
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
#if (nrow(d) > 1000){
#final_df <- sample_n(d, 1000)
#}
#else{
#final_df <- d
#}
if (nrow(d) < min) {
min = nrow(d)
#print(min)
}
d[ , "app"] = substr(basename(x),9,11)
d[ , "type"] <- 'train'
return(d)
}))
print("dim(training.data)")
print(dim(training.data))
#Clean host training data
training.data <- removeVars(training.data)
training.data <- training.data[complete.cases(training.data), ]
training.data[training.data < 0] <- 0
if (coresSum) {
training.data <- sum_cores(training.data)
}
View(training.data)
server <- "bscgrid31"
coresSum <- TRUE
muliplyMetrics <- FALSE
exponentialMetrics <- TRUE
LOG_METRICS <- TRUE
OUTPUT_FOR_PAPER <- TRUE
log_file <- "./log/model.log"
PATH <- "./training"
#PATH <- "./validation"
#files <- list.files(path = PATH,pattern="^results*", full.names = TRUE)
files <- list.files(path = PATH,pattern="*cpu*", full.names = TRUE)
PERF_COUNTERS = c("cpu.migrations","instructions", "cpu.cycles", "branches", "branch.misses","L1.icache.loads","L1.icache.load.misses","L1.dcache.loads","L1.dcache.load.misses","LLC.loads","LLC.load.misses","LLC.stores","DISPATCHED_FPU_OPS","L2_CACHE_MISS","MEMORY_REQUESTS","REQUESTS_TO_L2","RETIRED_MMX_FP_INSTRUCTIONS_MMX","RETIRED_MMX_FP_INSTRUCTIONS_SSE","RETIRED_MMX_FP_INSTRUCTIONS_X87","RETIRED_SSE_OPS","RETIRED_UOPS")
cores <- c("Core_0","Core_1","Core_2","Core_3","Core_4","Core_5","Core_6","Core_7","Core_8","Core_9","Core_10","Core_11","Core_12","Core_13","Core_14","Core_15")
filter <- c("cpu_system", "cpu_idle", "cpu_nice","reads","writes","read_time" ,"write_time","mem_shared","interrupts","cpu_system","cpu_wio","cpu_intr", "cpu_sintr","pkts_in","pkts_out","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
#filter <- c("cpu.migrations","mem_shared","interrupts","cpu_intr", "cpu_sintr","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
fff <- c("cpu.migrations","L2_RQSTS_ALL_CODE_RD","L2_RQSTS_CODE_RD_HIT","L2_RQSTS_CODE_RD_MISS","MEMORY_REQUESTS","mem_cached")
disk.metrics <- c("bytes_read","bytes_written")
network.metrics <- c("bytes_in","bytes_out", "pkts_in", "pkts_out")
#filter2 <- c(filter, disk.metrics, network.metrics, cores)
cpu.metrics <- c("cpu_util","cpu_user")
keepme <- c("powerWatts", disk.metrics, network.metrics, cores)#, PERF_COUNTERS)#, cpu.metrics)
filter2 <- c("cpu_util","cpu_user","bytes_read","bytes_written")
#keepme <- c()
#mainkeepme <- c("powerWatts", "instructions", "cpu.cycles", "branch-misses", "LLC.loads", "RETIRED_UOPS")
min <- 2000
#Read training data (with data only describing the server)
training.data <- do.call(rbind,lapply(files, function(x) {
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
#if (nrow(d) > 1000){
#final_df <- sample_n(d, 1000)
#}
#else{
#final_df <- d
#}
if (nrow(d) < min) {
min = nrow(d)
#print(min)
}
#d[ , "app"] = substr(basename(x),9,11)
#d[ , "type"] <- 'train'
return(d)
}))
print("dim(training.data)")
print(dim(training.data))
#Clean host training data
training.data <- removeVars(training.data)
training.data <- training.data[complete.cases(training.data), ]
training.data[training.data < 0] <- 0
if (coresSum) {
training.data <- sum_cores(training.data)
}
test_sample <- read.csv('test_sample', header=T, stringsAsFactors=FALSE, sep=",")
test_sample <- read.csv('test_sample.csv', header=T, stringsAsFactors=FALSE, sep=",")
merge = rbind(training.data,test_sample)
View(test_sample)
test_sample <- test_sample[,test_sample[-1]]
test_sample <- test_sample[,2:
test_sample <- test_sample[,2:]
test_sample[,2:]
test_sample[,2]
test-sample$X <- NULL
test_sample$X <- NULL
merge = rbind(training.data,test_sample)
write.csv(merge,paste('./','train_test',sep=''))
server <- "bscgrid31"
coresSum <- TRUE
muliplyMetrics <- FALSE
exponentialMetrics <- TRUE
LOG_METRICS <- TRUE
OUTPUT_FOR_PAPER <- TRUE
log_file <- "./log/model.log"
PATH <- "./training"
#PATH <- "./validation"
#files <- list.files(path = PATH,pattern="^results*", full.names = TRUE)
files <- list.files(path = PATH,pattern="*cpu*", full.names = TRUE)
PERF_COUNTERS = c("cpu.migrations","instructions", "cpu.cycles", "branches", "branch.misses","L1.icache.loads","L1.icache.load.misses","L1.dcache.loads","L1.dcache.load.misses","LLC.loads","LLC.load.misses","LLC.stores","DISPATCHED_FPU_OPS","L2_CACHE_MISS","MEMORY_REQUESTS","REQUESTS_TO_L2","RETIRED_MMX_FP_INSTRUCTIONS_MMX","RETIRED_MMX_FP_INSTRUCTIONS_SSE","RETIRED_MMX_FP_INSTRUCTIONS_X87","RETIRED_SSE_OPS","RETIRED_UOPS")
cores <- c("Core_0","Core_1","Core_2","Core_3","Core_4","Core_5","Core_6","Core_7","Core_8","Core_9","Core_10","Core_11","Core_12","Core_13","Core_14","Core_15")
filter <- c("cpu_system", "cpu_idle", "cpu_nice","reads","writes","read_time" ,"write_time","mem_shared","interrupts","cpu_system","cpu_wio","cpu_intr", "cpu_sintr","pkts_in","pkts_out","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
#filter <- c("cpu.migrations","mem_shared","interrupts","cpu_intr", "cpu_sintr","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
fff <- c("cpu.migrations","L2_RQSTS_ALL_CODE_RD","L2_RQSTS_CODE_RD_HIT","L2_RQSTS_CODE_RD_MISS","MEMORY_REQUESTS","mem_cached")
disk.metrics <- c("bytes_read","bytes_written")
network.metrics <- c("bytes_in","bytes_out", "pkts_in", "pkts_out")
#filter2 <- c(filter, disk.metrics, network.metrics, cores)
cpu.metrics <- c("cpu_util","cpu_user")
keepme <- c("powerWatts", disk.metrics, network.metrics, cores)#, PERF_COUNTERS)#, cpu.metrics)
filter2 <- c("cpu_util","cpu_user","bytes_read","bytes_written")
#keepme <- c()
#mainkeepme <- c("powerWatts", "instructions", "cpu.cycles", "branch-misses", "LLC.loads", "RETIRED_UOPS")
min <- 2000
#Read training data (with data only describing the server)
training.data <- do.call(rbind,lapply(files, function(x) {
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
#if (nrow(d) > 1000){
#final_df <- sample_n(d, 1000)
#}
#else{
#final_df <- d
#}
if (nrow(d) < min) {
min = nrow(d)
#print(min)
}
d[ , "app"] = substr(basename(x),9,11)
d[ , "type"] <- 'train'
return(d)
}))
print("dim(training.data)")
print(dim(training.data))
#Clean host training data
training.data <- removeVars(training.data)
training.data <- training.data[complete.cases(training.data), ]
training.data[training.data < 0] <- 0
if (coresSum) {
training.data <- sum_cores(training.data)
}
server <- "bscgrid31"
coresSum <- TRUE
muliplyMetrics <- FALSE
exponentialMetrics <- TRUE
LOG_METRICS <- TRUE
OUTPUT_FOR_PAPER <- TRUE
log_file <- "./log/model.log"
PATH <- "./training"
#PATH <- "./validation"
files <- list.files(path = PATH,pattern="^results*", full.names = TRUE)
#files <- list.files(path = PATH,pattern="*cpu*", full.names = TRUE)
PERF_COUNTERS = c("cpu.migrations","instructions", "cpu.cycles", "branches", "branch.misses","L1.icache.loads","L1.icache.load.misses","L1.dcache.loads","L1.dcache.load.misses","LLC.loads","LLC.load.misses","LLC.stores","DISPATCHED_FPU_OPS","L2_CACHE_MISS","MEMORY_REQUESTS","REQUESTS_TO_L2","RETIRED_MMX_FP_INSTRUCTIONS_MMX","RETIRED_MMX_FP_INSTRUCTIONS_SSE","RETIRED_MMX_FP_INSTRUCTIONS_X87","RETIRED_SSE_OPS","RETIRED_UOPS")
cores <- c("Core_0","Core_1","Core_2","Core_3","Core_4","Core_5","Core_6","Core_7","Core_8","Core_9","Core_10","Core_11","Core_12","Core_13","Core_14","Core_15")
filter <- c("cpu_system", "cpu_idle", "cpu_nice","reads","writes","read_time" ,"write_time","mem_shared","interrupts","cpu_system","cpu_wio","cpu_intr", "cpu_sintr","pkts_in","pkts_out","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
#filter <- c("cpu.migrations","mem_shared","interrupts","cpu_intr", "cpu_sintr","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
fff <- c("cpu.migrations","L2_RQSTS_ALL_CODE_RD","L2_RQSTS_CODE_RD_HIT","L2_RQSTS_CODE_RD_MISS","MEMORY_REQUESTS","mem_cached")
disk.metrics <- c("bytes_read","bytes_written")
network.metrics <- c("bytes_in","bytes_out", "pkts_in", "pkts_out")
#filter2 <- c(filter, disk.metrics, network.metrics, cores)
cpu.metrics <- c("cpu_util","cpu_user")
keepme <- c("powerWatts", disk.metrics, network.metrics, cores)#, PERF_COUNTERS)#, cpu.metrics)
filter2 <- c("cpu_util","cpu_user","bytes_read","bytes_written")
#keepme <- c()
#mainkeepme <- c("powerWatts", "instructions", "cpu.cycles", "branch-misses", "LLC.loads", "RETIRED_UOPS")
min <- 2000
#Read training data (with data only describing the server)
training.data <- do.call(rbind,lapply(files, function(x) {
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
#if (nrow(d) > 1000){
#final_df <- sample_n(d, 1000)
#}
#else{
#final_df <- d
#}
if (nrow(d) < min) {
min = nrow(d)
#print(min)
}
d[ , "app"] = substr(basename(x),9,11)
d[ , "type"] <- 'train'
return(d)
}))
print("dim(training.data)")
print(dim(training.data))
#Clean host training data
training.data <- removeVars(training.data)
training.data <- training.data[complete.cases(training.data), ]
training.data[training.data < 0] <- 0
if (coresSum) {
training.data <- sum_cores(training.data)
}
test_sample <- read.csv('test_sample.csv', header=T, stringsAsFactors=FALSE, sep=",")
test-sample$X <- NULL
test_sample <- read.csv('test_sample.csv', header=T, stringsAsFactors=FALSE, sep=",")
test_sample$X <- NULL
merge = rbind(training.data,test_sample)
server <- "bscgrid31"
coresSum <- TRUE
muliplyMetrics <- FALSE
exponentialMetrics <- TRUE
LOG_METRICS <- TRUE
OUTPUT_FOR_PAPER <- TRUE
log_file <- "./log/model.log"
PATH <- "./training"
#PATH <- "./validation"
files <- list.files(path = PATH,pattern="^results*", full.names = TRUE)
#files <- list.files(path = PATH,pattern="*cpu*", full.names = TRUE)
PERF_COUNTERS = c("cpu.migrations","instructions", "cpu.cycles", "branches", "branch.misses","L1.icache.loads","L1.icache.load.misses","L1.dcache.loads","L1.dcache.load.misses","LLC.loads","LLC.load.misses","LLC.stores","DISPATCHED_FPU_OPS","L2_CACHE_MISS","MEMORY_REQUESTS","REQUESTS_TO_L2","RETIRED_MMX_FP_INSTRUCTIONS_MMX","RETIRED_MMX_FP_INSTRUCTIONS_SSE","RETIRED_MMX_FP_INSTRUCTIONS_X87","RETIRED_SSE_OPS","RETIRED_UOPS")
cores <- c("Core_0","Core_1","Core_2","Core_3","Core_4","Core_5","Core_6","Core_7","Core_8","Core_9","Core_10","Core_11","Core_12","Core_13","Core_14","Core_15")
filter <- c("cpu_system", "cpu_idle", "cpu_nice","reads","writes","read_time" ,"write_time","mem_shared","interrupts","cpu_system","cpu_wio","cpu_intr", "cpu_sintr","pkts_in","pkts_out","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
#filter <- c("cpu.migrations","mem_shared","interrupts","cpu_intr", "cpu_sintr","page_in","page_out","swap_in","swap_out","swap_free","Core_1CPU","Core_2CPU","numSockets")
fff <- c("cpu.migrations","L2_RQSTS_ALL_CODE_RD","L2_RQSTS_CODE_RD_HIT","L2_RQSTS_CODE_RD_MISS","MEMORY_REQUESTS","mem_cached")
disk.metrics <- c("bytes_read","bytes_written")
network.metrics <- c("bytes_in","bytes_out", "pkts_in", "pkts_out")
#filter2 <- c(filter, disk.metrics, network.metrics, cores)
cpu.metrics <- c("cpu_util","cpu_user")
keepme <- c("powerWatts", disk.metrics, network.metrics, cores)#, PERF_COUNTERS)#, cpu.metrics)
filter2 <- c("cpu_util","cpu_user","bytes_read","bytes_written")
#keepme <- c()
#mainkeepme <- c("powerWatts", "instructions", "cpu.cycles", "branch-misses", "LLC.loads", "RETIRED_UOPS")
min <- 2000
#Read training data (with data only describing the server)
training.data <- do.call(rbind,lapply(files, function(x) {
d <- read.csv(x, header=T, stringsAsFactors=FALSE, sep=",")
if ("L1.dcache.stores" %in%  names(d)) {
d <- d[-grep(pattern = "L1.dcache.stores", names(d))]
}
if ("Core_2CPU" %in%  names(d)) {
d <- d[-grep(pattern = "Core_2CPU", names(d))]
d <- d[-grep(pattern = "Core_1CPU", names(d))]
d <- d[-grep(pattern = "numSockets", names(d))]
}
#if (nrow(d) > 1000){
#final_df <- sample_n(d, 1000)
#}
#else{
#final_df <- d
#}
if (nrow(d) < min) {
min = nrow(d)
#print(min)
}
#d[ , "app"] = substr(basename(x),9,11)
#d[ , "type"] <- 'train'
return(d)
}))
print("dim(training.data)")
print(dim(training.data))
#Clean host training data
training.data <- removeVars(training.data)
training.data <- training.data[complete.cases(training.data), ]
training.data[training.data < 0] <- 0
if (coresSum) {
training.data <- sum_cores(training.data)
}
test_sample <- read.csv('test_sample.csv', header=T, stringsAsFactors=FALSE, sep=",")
test_sample$X <- NULL
merge = rbind(training.data,test_sample)
write.csv(merge,paste('./','train_test.csv',sep=''))
install.packages("warbleR")
setwd("~/Desktop/powermodelgenerator-r")
install.packages("warbleR")
library(warbleR)
setwd("~/Desktop/powermodelgenerator-r")
install.packages("warbleR")
install.packages("fftw")
install.packages("fftw")
install.packages("warbleR")
install.packages("bioacoustics")
install.packages("warbleR")
install.packages("RCurl")
install.packages("warbleR")
library(warbleR)
a <- specan(reccord.wav)
setwd("~/Desktop/powermodelgenerator-r")
a <- specan(reccord.wav)
library(warbleR)
a <- specan(reccord.wav)
a <- specan('reccord.wav')
x <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John","Dora"))
View(validation.training.data)
View(x)
x <- data.frame("sound.files" = 1, "sel" = 3, "start" = 0,"end" = 100)
x <- data.frame("sound.files" = "reccord.wav", "sel" = 3, "start" = 0,"end" = 100)
View(x)
a <- specan('reccord.wav')
a <- specan(x)
x <- data.frame("sound.files" = "reccord.wav", "selec" = 3, "start" = 0,"end" = 100)
a <- specan(x)
x <- data.frame("sound.files" = "reccord.wav", "selec" = 3, "start" = 0,"end" = 19)
a <- specan(x)
x <- data.frame("sound.files" = "reccord.wav", "selec" = 3, "start" = 0,"end" = 19,"bottom.freq" = 100, "top.freq" = 1000)
a <- specan(x)
x <- data.frame("sound.files" = "reccord.wav", "selec" = 1, "start" = 0,"end" = 10,"bottom.freq" = 100, "top.freq" = 1000)
a <- specan(x)
x <- data.frame("sound.files" = "reccord.wav", "selec" = 1, "start" = 0,"end" = 6,"bottom.freq" = 100, "top.freq" = 1000)
a <- specan(x)
install.packages("fitdistrplus")
imdb=read.csv2("output_bert.csv")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Desktop/document-classification")
imdb=read.csv2("output_bert.csv")
